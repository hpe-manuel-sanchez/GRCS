@using UMGI.GRCS.BusinessEntities.Lookups
@using UMGI.GRCS.Resx.Resource.Layout
@using UMGI.GRCS.Resx.Resource.UIResources
@model UMGI.GRCS.UI.Models.ClearanceProjectModel
<script src="@Url.Content("/GCS/Scripts/Custom/ProjectInformationRegular.js")" type="text/javascript"> </script>
<script src="@Url.Content("/GCS/Scripts/Custom/CreateRegularProjectPartialView.js")" type="text/javascript"> </script>
<script src="@Url.Content("/GCS/Scripts/Custom/AuditTrail.js")" type="text/javascript"> </script>

<script type="text/javascript">
    $(document).ready(function() {
        applyCustomTheam();
        $("#rcc_handler").each(function() {
            var s = this;
            for (var i = 0; i < s.length; i++)
                s.options[i].title = s.options[i].text;
            if (s.selectedIndex > -1)
                s.onmousemove = function() { s.title = s.options[s.selectedIndex].text; };
        });

        $('#main').css("overflow-y", "auto");

        if ('@ViewBag.LoadTemplate' == "1") {

            $('#btnReinstate').prop('disabled', false);
            $('#btnReOpen').prop('disabled', false);
            $('#btnSubmit').prop('disabled', false);
            $('#btnSave').prop('disabled', false);
            $('#btnCancelProject').prop('disabled', false);
            $('#btnComplete').prop('disabled', false);
        }

    });
    
    // start for maitain tab selected when postback    
    var showTabIndex = '@ViewBag.DefaultTab';
    
    if (showTabIndex == null || showTabIndex == '')
        showTabIndex = 0;

    showTabIndex = parseInt(showTabIndex);

    $(function() {
        $("#tabs").tabs({ selected: showTabIndex });
        $('#tabs').show();
    });
    
    // End for maitain tab selected when postback   
    var mandatoryFields = '@ClearenceResource.js_MandatoryFields';
    var mandatorySearchCriteria = '@ClearenceResource.js_searchworkgroupInvalidMessage';
    var mandatoryResourceFields = '@ClearenceResource.js_MandatoryResourceField';
    var thirdPartyMandatorySelection = '@ClearenceResource.js_thirdPartyMandatorySelectionMessage';
    var freeHandResourceMsgPush = '@ClearanceLayout.freeHandResourceMsgPush';
    var authorizedUserMsgPush = '@ClearanceLayout.authorizedUserMsgPush';
    var upcNullMsgPush = '@ClearanceLayout.upcNullMsgPush';
    var freehandCompanyPush = '@ClearanceLayout.freehandCompanyPush';
    var noReleaseResourceFoundPush = '@ClearanceLayout.noReleaseResourceFoundPush';
    var R2ProjectIdIs = '@ClearanceLayout.R2ProjectIdIs';
    var R2ProjectNotSelectedPush = '@ClearanceLayout.R2ProjectNotSelectedPush';
    var R2LinkFailed = '@ClearanceLayout.R2LinkFailed';
    var R2InProgressPush = '@ClearanceLayout.R2InProgressPush';
    var RegularProjectMoneyMsg = '@ClearanceLayout.RegularProjectMoneyMsg';
    var WaterMarkAPremiumComments = '@ClearanceLayout.WaterMarkAGiveAwayComments';
    var WaterMarkAGiveAwayComments = '@ClearanceLayout.WaterMarkAGiveAwayComments';
    var WaterMarkAOtherComments = '@ClearanceLayout.WaterMarkAOtherComments';
    var mandatorylinkArtist = '@ClearenceResource.Js_LinkArtist';
    var freeHandCompanyMsg = '@ClearanceLayout.freeHandCompanyMsg';
    var authorizedR2UserMsgPush = '@ClearanceLayout.authorizedR2UserMsgPush';
    var authorizedR2UserMsgSubsequent = '@ClearanceLayout.authorizedR2UserMsgSubsequent';
    var LoadTemplate = '@ViewBag.LoadTemplate';
    var authorizedUserSearchMsgPush = '@ClearanceLayout.authorizedUserSearchMsgPush';

</script>

<!-- #### Page Middle container starts here ### -->
<div class="pageMiddleContainer">

    <div id="SearchR2ProjectsDialog" style="padding: 0; margin: 0;"></div>

    <div id="PushToR2Dialog" style="padding: 0; margin: 0;"></div>

    <div class="pageTitle" style="float: left;">
        <h2>@(Model.RegularProjectDetails.ClearanceProjectID > 0 ? "Regular/Non Traditional Project" : "Create New Regular/Non Traditional Project")</h2>
    </div>

    <div style="float: right; width: 5%; margin-top: 5px;">
        @if (Model.RegularProjectDetails.StatusType != 1)
        {
            <div id="regularProjInfoAuditLink">
                <a style="text-decoration: underline;" href="#" onclick=" return triggerRegularProjInfoAuditHistory(AuditObjectType.RegularNonTraditionalProjectProjectAuditHistory) ">
                    History</a></div>
            <div id="regularReqTypeAuditLink" style="display: none;">
                <a style="text-decoration: underline;" href="#" onclick=" return triggerRegularProjInfoAuditHistory(AuditObjectType.RegularNonTraditionalProjectRequestTypeAuditHistory) ">
                    History</a></div>
        }
    </div>

    <div style="clear: both;"></div>
    <div id="divMessage" class="success msg-margin" style="display: none;"></div>
    <div id="divMessageR2IdLinked" class="success error-msg-margin"></div>
    <div id="divMessagePushToR2" class="success error-msg-margin"></div>
    <div id="divErrorMessage" class="warning msg-margin"></div>
    <div id="divErrorMsg" class="error msg-margin" style="display: none;"></div>

    @if (ViewBag.ValidationWarningMsg != null)
    {
        <div id="divErrorMessage1" class="error msg-margin">@ViewBag.ValidationWarningMsg</div>
    }

    <div id="divErrorMsgUpcNull" class="warning1 error-msg-margin"></div>
    <div id="divErrorMsgPushToR2" class="warning1 error-msg-margin"></div>

    <!-- #### tabs code starts here ### -->
    <div id="tabs" style="display: none;">
        <ul id="screenTabs">
            <li class="FirsttabGap" id="projectInformationTab">
                <a href="#tabs-1">
                    @Html.Hidden("hdnDefaultTab")
                    @Html.Hidden("hdnAdditionalResourceCheck")
                    @Html.Hidden("hdnPackageRoutingCheck")
                    @Html.Label(@ClearanceLayout.RegularProjectProjectInformationLabel)
                    @Html.Hidden("hdnSearchForR2Project")
                    @Html.Hidden("searchProjectListPush")
                    @Html.Hidden("searchR2ProjectCode")
                </a>
            </li>
            <li class="tabGap" id="requestTypeTab">
                <a href="#tabs-2">
                    @Html.Label(@ClearanceLayout.CreateRegProjRequestTypeHeader)
                </a>
            </li>
            @if ((string.IsNullOrEmpty(Model.RegularProjectDetails.ReleaseNewOrExisting)) || (Model.RegularProjectDetails.ReleaseNewOrExisting.Equals("New")))
            {
                <li class="tabGap" id="releaseTab">
                    <a href="#tabs-3">
                        @Html.Label(@ClearanceLayout.CreateRegProjReleaseHeader)
                    </a>
                </li>
                <li class="tabGap" id="resourcesTab">
                    <a href="#tabs-4">
                        @Html.Label(@ClearanceLayout.CreateRegProjResourcesHeader)
                    </a>
                </li>
            }
            else
            {
                <li class="tabGap" id="releaseTab">
                    <a href="#tabs-3">
                        @Html.Label(@ClearanceLayout.CreateRegProjReleaseHeader)
                    </a>
                </li>
            }
            <li class="tabGap" id="summaryTab">
                <a href="#tabs-5">
                    @Html.Label(@ClearanceLayout.CreateRegProjRequestSummaryHeader)
                </a>
            </li>
        </ul>
        <div class="rightMostLi">
            @if (Model.ReadOnlyMode == 1)
            {
                @Html.HiddenFor(model => model.ReadOnlyMode, new { id = "IsReadOnlyMode" })                
                <span class="currencypadding">@Html.Label(@ClearanceLayout.CreateRegProjReleaseTypeDrpdwn)</span>

                if (Model.RegularProjectDetails.ReleaseNewOrExisting == "Exist")
                {
                <label>Existing</label>
                }
                else
                {
                <label>New</label>
                }
            }
            else
            {
                @Html.Label(@ClearanceLayout.CreateRegProjReleaseTypeDrpdwn)
                <select id="cmbReleaseNewOrExisting" size="1">
                    <option id="New" value="1" onclick=" getContentTab(3); ">@Html.Label(@ClearanceLayout.CreateRegProjNewLabel)</option>
                    <option id="Existing" value="2" onclick=" getContentTab(3); ">@Html.Label(@ClearanceLayout.CreateRegProjExistingLabel)</option>
                </select>
            }
            @Html.HiddenFor(model => model.RegularProjectDetails.ReleaseNewOrExisting, new { id = "FlagReleaseNewOrExisting" })
            @if (ViewBag.RoleGroup != null)
            {
                @Html.HiddenFor(model => model.roleGroupName, new { id = "hdnRoleGroup" })

                if (Model.RegularProjectDetails.Rcc_User == "")
                {
                    Model.RegularProjectDetails.Rcc_User = "0";
                }
                if (ViewBag.RoleGroup == RoleGroup.RCCAdmin)
                {
                <span class="currencypadding" style="margin-left: 10px;">
                    @Html.Label(ClearanceLayout.lblRccHandler)
                </span>
                    if (Model.ReadOnlyMode == 1)
                    {
                @Html.DropDownList(Model.RegularProjectDetails.Rcc_User, new SelectList(Model.RccHandler.Select(r => new { r.Text, r.Value }), "value", "text", Model.RegularProjectDetails.Rcc_User), "--Select--", new { id = "rcc_handler", style = "width:100px;", onchange = "SaveRCCHandler();", disabled = "disabled" })
                    }
                    else
                    {
                @Html.DropDownList(Model.RegularProjectDetails.Rcc_User, new SelectList(Model.RccHandler.Select(r => new { r.Text, r.Value }), "value", "text", Model.RegularProjectDetails.Rcc_User), "--Select--", new { id = "rcc_handler", style = "width:100px;", onchange = "SaveRCCHandler();" })
                    }
                }
            }

            <span class="currencypadding" style="margin-left: 10px;">@Html.Label(ClearanceLayout.ClearanceProjectCurrency)</span>&nbsp;
            
            @if (Model.ReadOnlyMode == 1)
            {
                <label>@Model.RegularProjectDetails.Currency</label>
            }
            else
            {
                @Html.DropDownListFor(model => model.RegularProjectDetails.Currency, new SelectList(Model.CurrencyList, "Text", "Text"), new { Id = "CurrencyList", onfocus = "currencyFocus();", onblur = "currencyBlur();" })
            }
        </div>
        <div id="wrapper" style="background-color: #FFF;">
            @if (Model.ReadOnlyMode == 1)
            {
                <div id="tabs-1">@Html.Partial("ProjectInformationRegularReadOnly", Model)</div>
                <div id="tabs-2">@Html.Partial("RequestTypeRegularReadOnly", Model)</div>

                if ((string.IsNullOrEmpty(Model.RegularProjectDetails.ReleaseNewOrExisting)) || (Model.RegularProjectDetails.ReleaseNewOrExisting.Equals("New")))
                {
                    if (ViewBag.RoleGroup == RoleGroup.RCCAdmin && !Model.IsProjectBlocked)
                    {
                        if (ViewBag.LoadTemplate != "1")
                        {
                            <div id="tabs-3"></div>
                        }
                        else
                        {
                            <div id="tabs-3">
                                @Html.Partial("ReleaseNewRegular", Model)
                            </div>
                        }
                    }
                    else
                    {
                    <div id="tabs-3">@Html.Partial("ReleaseRegularReadOnly", Model)</div>
                    }
                    
                    <div id="tabs-4">@Html.Partial("ResourceRegularReadOnly", Model)</div>
                }
                else
                {
                <div id="tabs-3">@Html.Partial("ReleaseRegularReadOnly", Model)</div>
                }

                <div id="tabs-5">@Html.Partial("RequestSummaryRegular", Model)</div>
            }
            else
            {
                <div id="tabs-1">@Html.Partial("ProjectInformationRegular", Model)</div>
                <div id="tabs-2">@Html.Partial("RequestTypeRegular", Model)</div>

                if ((string.IsNullOrEmpty(Model.RegularProjectDetails.ReleaseNewOrExisting)) || (Model.RegularProjectDetails.ReleaseNewOrExisting.Equals("New")))
                {
                    if (ViewBag.LoadTemplate != "1")
                    {
                <div id="tabs-3"></div>
                <div id="tabs-4" style="margin: 0; padding: 0;"></div>
                    }
                    else
                    {
                        <div id="tabs-3">
                            @Html.Partial("ReleaseNewRegular", Model)
                        </div>
                        <div id="tabs-4" style="margin: 0; padding: 0;">
                            @Html.Partial("ResourcesRegular", Model)
                        </div>
                    }
                }
                else
                {
                    if (ViewBag.LoadTemplate != "1")
                    {
                <div id="tabs-3"></div>
                    }
                    else
                    {
                        <div id="tabs-3">
                            @Html.Partial("ReleaseRegular", Model)
                        </div>
                    }
                }
                <div id="tabs-5">
                    @Html.Partial("RequestSummaryRegular", Model)
                </div>
            }
        </div>
        @Html.Hidden("hdntempProjectId")@Html.Hidden("hdnCancelledProjectId")@Html.Hidden("hdnReopenProjectId")
        @Html.HiddenFor(model => model.RegularProjectDetails.StatusType, new { Id = "hdnProjectStatusId" })
    </div>
    <!-- #### Tabs Code Ends here ### -->
</div>

<!-- #### Page Middle container ends here ### -->
@if (ViewBag.ProjectTerritories != null)
{
    foreach (int index in ViewBag.ProjectTerritories.Keys)
    {
    <script type="text/javascript">

        var territorycountryList = @Html.Raw(Json.Encode(ViewBag.ProjectTerritories[index]));

        if (territorycountryList != null) {
            if (document.getElementById('hdnterritoryDetailsForSave_' + @Html.Raw(Json.Encode(index))) != null) {
                    document.getElementById('hdnterritoryDetailsForSave_' + @Html.Raw(Json.Encode(index))).value = JSON.stringify(@Html.Raw(Json.Encode(ViewBag.ProjectTerritories[index])));
                }
            }

    </script>
    }
}