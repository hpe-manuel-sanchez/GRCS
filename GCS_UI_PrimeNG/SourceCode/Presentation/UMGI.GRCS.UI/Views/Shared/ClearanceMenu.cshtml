@using UMGI.GRCS.BusinessEntities.Entities.AnaEntities
@using UMGI.GRCS.Resx.Resource.Layout
@using UMGI.GRCS.UI.Extensions
@using System.Web.Mvc;
@using UMGI.GRCS.UI.Helper
@using UMGI.GRCS.UI.Interfaces;

<link href="@VersionExtension.GetFileLastVersion(Url.Content("/GCS/Content/jquerycssmenu.min.css"))" rel="stylesheet" type="text/css" />
<script src="@VersionExtension.GetFileLastVersion(Url.Content("/GCS/Scripts/Custom/Shared/ClearanceMenu.js"))" type="text/javascript"></script>

<div class="page top">
    @{
        var layoutModel = new UMGI.GRCS.UI.Models.LayoutModel();
    }
    <div class="headerLayout">
        <div class="nav menucolor">
            <div id="title" style="position: relative; margin-right: 9px; margin-top: 0px;">
                <img id="logo" src="@Url.Content("/GCS/Images/gcs-logo-transparent.png")" alt="" />
            </div>
            <div style="margin: 40px 6px 5px 0; font-size: 9px; font-weight: bold; float: left;">@layoutModel.AppEnvironment @layoutModel.AppVersion</div>
            @{
                var userSessionWrapper = DependencyResolver.Current.GetService<ISessionWrapper>();
                var isRccAdmin = userSessionWrapper.GcsCurrentPermissions.Roles.Where(roles => roles.Value == "RCC Admin").GroupBy(role => role.Value).Count() != 0;
            }
            <ul id="menu" style="position: relative; right: 15px;">
                <li>
                    <a href="javascript:void(0);">
                        @UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.WelcomeHeader<b>&nbsp;@userSessionWrapper.GcsCurrentPermissions.UserName</b>
                    </a>
                </li>
                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.UserPreference }))
                {
                    <li>
                        <label class="menucolor" id="lblMenuUserPreference">|</label>
                        @Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.UserRolesHeader, "UserPreferences", "WorkGroup", null, new { id = "lnkUserPreferencesMenu" })
                    </li>
                }

                @if (userSessionWrapper.GcsCurrentPermissions.IsMimicUser == true)
                {
                    <li id="MimicUserExitListItem">
                        <label class="menucolor">
                            |
                        </label><span id="lnkMimicUserExit" class="menucolor" style="text-decoration: underline; cursor: pointer;">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.MimicUser_ExitLabel</span>
                    </li>
                }
                <li>
                    <label class="menucolor">|&nbsp;&nbsp;<a class="helpSupportImg" href="javascript:ShowHelpPopup();" title="Help"></a></label>
                </li>
            </ul>
        </div>
        <div id="pageMenu ">
            <div id="myjquerymenu" class="jquerycssmenu">
                <ul class="ulGCSMenu" id="clearenceMainMenu">
                    <li class="first">
                        <a href='@Url.Action("Index", "ClearanceInbox")'><span class="leftcurve clearanceHomeMenu" id="menuOption">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.HomeHeader</span></a>
                    </li>
                    @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.ClrProjectCreation }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.ClearanceProjectInquiry }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.CancelClrProject }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.UserTransfer }))
                    {
                        <li>
                            <div class="clearanceSeparator"></div>
                            <a href="#"><span id="menuOption">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ProjectsHeader</span></a>
                            <ul>
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.ClrProjectCreation }))
                                {
                                    <li>
                                        <a href="#" class="width3">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.CreateProjectMenu</a>
                                        <ul style="top: -1px !important;">
                                            <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.CreateNewRegularNonTraditionalProjectItem, "CreateRegularProject", "ClearanceProject", null, new { @class = "width5" })</li>
                                            <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.CreateNewMasterProjectItem, "CreateMasterProject", "ClearanceProject", null, new { @class = "width5" })</li>
                                            <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.CreateNewFromExistingProjectItem, "ClearanceProjectSearch", "Search", null, new { @class = "width5" })</li>
                                        </ul>
                                    </li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.ClearanceProjectInquiry }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ProjectInquiryMenu, "InquirySearch", "Search", null, new { @class = "width3" })</li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.CancelClrProject }))
                                {
                                    <li>
                                        <a class="width3" href='@Url.Action("SearchCancelledProject/C", "ClearanceProject")'>
                                            @UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.MaintainCompletedMenu
                                            <br />
                                            @UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.CancelledProjectsMenu
                                        </a>
                                    </li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.UserTransfer }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.RequestorTransferMenu, "ProjectSearchUserTransfer", "ClearanceProject", null, new { @class = "width3" })</li>
                                }
                            </ul>
                        </li>
                    }
                    @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.CreateParentWorkgroup }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.MaintainParentWorkgroup }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.WorkgroupDeviation }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.DeactivateWorkgroup }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.DeleteWorkgroup }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManageUserWorkgroups }))
                    {
                        <li>
                            <div class="clearanceSeparator"></div>
                            <a href="#"><span id="menuOption">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.WorkgroupHeader</span></a>
                            <ul>
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.CreateParentWorkgroup }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.CreateWorkgroupHeader, "CreateParentWorkgroup", "WorkGroup", null, new { @class = "width3" })</li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.MaintainParentWorkgroup }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageWorkgroupMenu, "MaintainParentWorkgroup", "WorkGroup", null, new { @class = "width3" })</li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManageUserWorkgroups }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageUsersMenu, "SearchWorkGroupToAddRemoveUsers", "WorkGroup", null, new { @class = "width3" })</li>

                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.WorkgroupDeviation }))
                                {
                                    <li>
                                        <a href="#" class="width3">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageDeviationsHeader</a>
                                        @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.CreateParentWorkgroup }))
                                        {
                                            <ul style="top: 61px !important;">
                                                <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageArtistContractMenu, "LinkArtistContractsToWorkgroups", "WorkGroup", null, new { @class = "width4" })</li>
                                                <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageResourceContractMenu, "LinkResourceContractsToWorkgroups", "WorkGroup", null, new { @class = "width4" })</li>
                                            </ul>
                                        }
                                        else
                                        {
                                            <ul style="top: 41px !important;">
                                                <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageArtistContractMenu, "LinkArtistContractsToWorkgroups", "WorkGroup", null, new { @class = "width4" })</li>
                                                <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageResourceContractMenu, "LinkResourceContractsToWorkgroups", "WorkGroup", null, new { @class = "width4" })</li>
                                            </ul>
                                        }
                                    </li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.DeactivateWorkgroup }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.DeactivateWorkgroupMenu, "SearchWorkgroup", "WorkGroup", null, new { @class = "width3" })</li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.DeleteWorkgroup }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.DeleteWorkgroupMenu, "DeleteWorkgroup", "WorkGroup", null, new { @class = "width3" })</li>
                                }
                            </ul>
                        </li>
                    }
                    @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.AutomaticUPCAllocation }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManualUPCAllocation }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.MimicUser }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.UnlockProjects }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManageRejectReason }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.RoutingVariationsMatrix }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManageSafeTerritories }))
                    {
                        <li>
                            <div class="clearanceSeparator"></div>
                            <a href="#"><span id="menuOption">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.AdminHeader</span></a>
                            <ul>
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.AutomaticUPCAllocation }) || PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManualUPCAllocation }))
                                {
                                    <li>
                                        @Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.AllocateUPCMenu, "AllocateUPC", "ClearanceProject", null, new { @class = "width4" })
                                    </li>

                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.MimicUser }) && userSessionWrapper.GcsCurrentPermissions.IsMimicUser == false)
                                {
                                    <li><a class="width4" href="#" id="lnkMimicUser">@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.MimicUserMenu</a></li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.UnlockProjects }))
                                {
                                    <li>
                                        @Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.UnlockProjectsMenu, "ClearanceProjectLocking", "ClearanceProject", null, new { @class = "width4" })
                                    </li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManageRejectReason }))
                                {
                                    <li>
                                        <a class="width4" href='@Url.Action("ManageRejectReason", "ClearanceInbox")'>
                                            @UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.RejectionReasonsMenuPart1<br />
                                            @UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.RejectionReasonsMenuPart2
                                        </a>
                                    </li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.RoutingVariationsMatrix }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageRoutingValidationMenu, "ManageRoutingRules", "Routing", null, new { @class = "width4" })</li>
                                }
                                @if (PermissionExtension.HasAnyPermission(new[] { GcsTasks.ManageSafeTerritories }))
                                {
                                    <li>@Html.ActionLink(@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.ManageSafeTerritoriesMenu, "GetSafeAreaTerritory", "Routing", null, new { @class = "width4", @id = "Link" })</li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
            </div>

            <div class="topEmailButton">
                <label class="menucolor">
                    <input id="btnEmail" type="button" value="@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.EmailButton" class="secbutton" style="display:none;" />
                </label>
                <label class="menucolor">
                    <input id="btnPrint" type="button" value="@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.PrintButton" class="secbutton" onclick="window.print()" />
                </label>
                <div id="email_menu">
                    <ul style="margin: 0 0 0 -5px; width: 110px; padding: 0; list-style: none; display: none;" id="ulMailList">
                        <li id="lnkUPCAllocation" style="display: none;"><a href="" onclick="if(!generateEmail(31)) return false;">UPC Allocation</a></li>
                        <li style="display: none;" id="lnkEmailGeneral"><a href="" onclick="if(!generateEmail(30)) return false;">General</a></li>
                        <li id="lnkEmailMaster" style="display: none;"><a href="" onclick="if(!generateEmail(32)) return false;">Master</a></li>
                        <li id="lnkEmailMasterWithReviewStatus" style="display: none;"><a href="" onclick="if(!generateEmail(37)) return false;">Master with review status</a></li>
                        <li id="lnkTvRadio" style="display: none;"><a href="" onclick="if(!generateEmail(33)) return false;">TV/Radio Break ICLA</a></li>
                        <li id="lnkRegularNon" style="display: none;"><a href="" onclick="if(!generateEmail(34)) return false;">Regular/Non-Traditional non-TV/Radio Break</a></li>
                        <li id="lnkRegularNonWithReviewStatus" style="display: none;"><a href="" onclick="if(!generateEmail(38)) return false;">Regular/Non-Traditional non-TV/Radio Break  with review status</a></li>
                        <li id="lnkEmailRegularArtistManagement" style="display: none;"><a href="" onclick="if(!generateEmail(99)) return false;">Artist Management- Regular/Non-Traditional</a></li>
                        <li id="lnkEmailArtistManagmentMaster" style="display: none;"><a href="" onclick="if(!generateEmail(41)) return false;">Artist Management- Master</a></li>
                    </ul>
                </div>
            </div>
            <div style="clear: both;">
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var titleMessage = '@ClearanceLayout.ManageSafeTerritory';
    var mimicUserExitLabel = '@UMGI.GRCS.Resx.Resource.Layout.ClearanceLayout.MimicUser_ExitLabel';
</script>
