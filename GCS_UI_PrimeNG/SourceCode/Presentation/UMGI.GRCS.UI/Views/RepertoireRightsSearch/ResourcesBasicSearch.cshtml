@using UMGI.GRCS.BusinessEntities.Entities.RepertoireEntities
@using UMGI.GRCS.Resx.Resource.UIResources

            
@(Html.Syncfusion().Grid<RepertoireRightsSearchResult>("ResourcesBasicSearch")
        .Datasource((IEnumerable<RepertoireRightsSearchResult>)ViewData["data"])
        .ActionMode(ActionMode.JSON)
        .EnableOnDemand()
        .EnableAlternateRowStyling()
        .AllowDragAndDrop(true)
        .AllowResizing(true)
        .CustomCss("Syncfusion-Grid-Greenish")
        .PageSettings(page => { page.PageSize(25); page.PagerPosition(Position.TopRight); page.PagerStyle(PagerStyle.DefaultAndAdvanced); })
        .TotalRecordCount(0)
        .EnablePaging()
        .EnableScrolling()
        .ClientSideEvents(events => events.QueryCellInfo("checkImageForRepertoireRightsSearch"))
        .ClientSideEvents(evt => evt.OnLoad("onLoad"))
        .ClientSideEvents(evt => evt.OnActionBegin("GridBegin"))
        .ClientSideEvents(evt => evt.OnActionSuccess("ActionSuccess"))
        .ClientSideEvents(evt => evt.OnActionFailure("ActionFailure"))
        .ClientSideEvents(evt => evt.BeforeDrop("ResouceSearchBeforeDrop"))
        .EnableSorting()
        .AllowAutoWrap(true)
        .EnableScrolling()
        .AllowSelection(true)
        .SelectionMode(SelectionMode.Multiple)  
        .Column(column =>
        {
            column.Add("").Format("<input type=\"checkBox\" id=\"chkChild\" class=\"chkChildClass\" >").Width(60).AllowFilter(false);
            column.Add(p => p.RightsSetId).Width(0).Visible(false);
            column.Add(p => p.ResourceId).Width(0).Visible(false);
            column.Add(p => p.R2ResourceId).Width(0).Visible(false);
            column.Add(p => p.ReleaseId).Width(0).Visible(false);
            column.Add(p => p.R2ReleaseId).Width(0).Visible(false);
            column.Add(p => p.ContractId).Width(0).Visible(false);
            column.Add(p => p.ResourceType).Width(40).HeaderText(@RepertoireSearch.Type).TextAlign(TextAlignment.Center).AllowSorting(false);
            column.Add(p => p.Isrc).Width(110).HeaderText(@RepertoireSearch.ISRC);
            column.Add(p => p.Upc).Width(110).HeaderText(@RepertoireSearch.UPC);
            column.Add(p => p.Artist).Width(180).HeaderText(@RepertoireSearch.Artist);
            column.Add(p => p.Title).Width(180).HeaderText(@RepertoireSearch.Title);
            column.Add(p => p.VersionTitle).Width(180).HeaderText(@RepertoireSearch.VersionTitle);
            column.Add(p => p.ReleaseDate).Width(70).HeaderText(@RepertoireSearch.ReleaseDate);
            column.Add(p => p.LinkedContract).Width(60).HeaderText(@RepertoireSearch.LinkedContract).TextAlign(TextAlignment.Center).AllowSorting(false);
            column.Add(p => p.ClearanceDataAdminCompany).Width(250).HeaderText(@RepertoireSearch.ClearanceOrDataAdminCompany);
            column.Add(p => p.IsArtist).Width(25).HeaderText(@RepertoireSearch.ArtistImage).TextAlign(TextAlignment.Center).AllowSorting(false);
            column.Add(p => p.IsSample).Width(25).HeaderText(@RepertoireSearch.CdImage).TextAlign(TextAlignment.Center).AllowSorting(false);
            column.Add(p => p.PYear).Width(50).HeaderText(@RepertoireSearch.Pyear);
            column.Add(p => p.ReviewStatus).Width(50).HeaderText(@RepertoireSearch.ReviewStatus).TextAlign(TextAlignment.Center).AllowSorting(false);
            column.Add(p => p.IsActiveForMarketing).Width(70).HeaderText(@RepertoireSearch.ActiveForMarketing).TextAlign(TextAlignment.Center);
            column.Add(p => p.TerritorialRights).Width(200).HeaderText(@RepertoireSearch.TerritorialRights);
            column.Add(p => p.RightsPeriod).Width(100).HeaderText(@RepertoireSearch.RightsPeriod);
            column.Add(p => p.IsLostRightsIndicator).Width(40).HeaderText(@RepertoireSearch.LostRights).TextAlign(TextAlignment.Center);
            column.Add(p => p.LostRightsReason).Width(120).HeaderText(@RepertoireSearch.LostRightsReason);
            column.Add(p => p.LostRightsDate).Width(70).HeaderText(@RepertoireSearch.LostRightsDate);
            column.Add(p => p.IsPhysicalExploitationRights).Width(80).HeaderText(@RepertoireSearch.PhysicalExploitationRights).TextAlign(TextAlignment.Center);
            column.Add(p => p.IsDigitalExploitationRights).Width(80).HeaderText(@RepertoireSearch.DigitalExploitationRights).TextAlign(TextAlignment.Center);
            column.Add(p => p.IsMobileExploitationRights).Width(80).HeaderText(@RepertoireSearch.MobileExploitationRights).TextAlign(TextAlignment.Center);
            column.Add(p => p.IsPpbRevenueClaim).Width(70).HeaderText(@RepertoireSearch.PPBRevenueClaim).TextAlign(TextAlignment.Center);
            column.Add(p => p.IsDigitalUnbundlingAllowed).Width(70).HeaderText(@RepertoireSearch.DigitalUnbundlingAllowed).TextAlign(TextAlignment.Center);
        })
        
        
        
        
        .StackedHeader(sh => sh.StackedRows("StackedRow", sr2 =>
        {
            sr2.StackedColumn("", cc =>
            {
                cc.Add(c => c.ResourceType);
                cc.Add(c => c.ResourceType);
                cc.Add(p => p.ResourceId);
                cc.Add(p => p.ReleaseId);
                cc.Add(p => p.ContractId);
                cc.Add(c => c.Isrc);
                cc.Add(c => c.Upc);
                cc.Add(c => c.Artist);
                cc.Add(c => c.Title);
                cc.Add(c => c.VersionTitle);
                cc.Add(c => c.ReleaseDate);
                cc.Add(c => c.LinkedContract);
                cc.Add(c => c.ClearanceDataAdminCompany);
                cc.Add(c => c.IsArtist);
                cc.Add(c => c.IsSample);
                cc.Add(c => c.PYear);
                cc.Add(c => c.ReviewStatus);
            });
            sr2.StackedColumn("Rights Acquired", cc =>
            {
                cc.Add(c => c.IsActiveForMarketing);
                cc.Add(c => c.TerritorialRights);
                cc.Add(c => c.RightsPeriod);
                cc.Add(c => c.IsLostRightsIndicator);
                cc.Add(c => c.LostRightsReason);
                cc.Add(c => c.LostRightsDate);
                cc.Add(c => c.LostRightsDate);
                cc.Add(c => c.IsPhysicalExploitationRights);
                cc.Add(c => c.IsDigitalExploitationRights);
                cc.Add(c => c.IsMobileExploitationRights);
                cc.Add(c => c.IsPpbRevenueClaim);
                cc.Add(c => c.IsDigitalUnbundlingAllowed);
            });
        }))
    .ShowStackedHeader(true)
)
